package com.lec.dbcp;

import javax.servlet.ServletException;
import javax.servlet.http.HttpServlet;

import org.apache.commons.dbcp2.ConnectionFactory;
import org.apache.commons.dbcp2.DriverManagerConnectionFactory;
import org.apache.commons.dbcp2.PoolableConnectionFactory;

public class DBCPInit extends HttpServlet {
	
	@Override
	public void init() throws ServletException {
		
		loadJDBCDriver();
		initConnectionPool();
		
	}

	private void loadJDBCDriver() {
		// Class.forName("org.mariadb...");
		// web.xml에 정의하고 로딩
		String driverClass = getInitParameter("jdbcDriver");
		
		try {
			Class.forName(driverClass);
		} catch (ClassNotFoundException e) {
			throw new RuntimeException("JDBC드라이버 로딩 실패 = " + 
					"web.xml 초기화 파라미터 jdbcDriver를 확인하세요");
		}
	}
	
	private void initConnectionPool() {
		
		String url = getInitParameter("url");
		String usr = getInitParameter("user");
		String pwd = getInitParameter("pass");
		
		// CP을 정의하기 위해서 Library를 등록(WEB-INF/lib)
		// commons-dbcp2-2.9.0.jar, commons-pool2.-2.11.1.jar,
		// commons-logging-1.2.jar
		
		// A. Connection Factory생성
		// 1. 커넥션풀이 새로운 커넥션을 생성할 때 사용하는 커넥션팩토리를 생성
		ConnectionFactory cf = new DriverManagerConnectionFactory(url, usr, pwd);
		
		// 2. PoolableConnection생성 - 팩토리생성 DBCP는 커넥션풀에 커넥션을 보관할 때 PoolableConnection을 사용한다.
		// 이 클래스는 내부적으로 커넥션을 보관하고 있으며 커넥션을 관리하는데 필요한 기능을 제공한다.
		// 예를 들어서 connection을 close하면 connection을 메모리에서 삭제하는 것이 아니라 Connection Pool에 Connection을 반환을 한다.
		PoolableConnectionFactory pcf = new PoolableConnectionFactory(cf, null);
		
		// 3. Connection이 유효한지를 검사하기 위한 SQL을 지정
		// Connection유효여부검사 : mariadb, mysql - select 1;
		// 						  : oracle         - select * from dual;
		pcf.setValidationQuery("select 1");  
		
		// B. Connection Pool설정정보
		// 1.
		// 2.
		// 3.
		// 4.
		// 5.
		
		// C. Connection Pool설정정보를 이용해서 CP 생성
		// 1.
		// 2.
		
		// D. Connection Pool에 제공할 JDBC드라이버를 등록
		
		
	}

}
